#!/usr/bin/env python 

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
import pandas as pd
import argparse
from emacscore.scoring import score_docs



parser = argparse.ArgumentParser(description='Extract moral informtion from textual documents with emacscore.')

# Define Input Document
parser.add_argument('infile', help='Path to input file.')
parser.add_argument('outfile', help='Path to output file.')
parser.add_argument('score_method', choices=['bow', 'wordlist'],
                   help='Determine how/what kind of documents to be scored.')
    
# Subparser for Dictionary Options
subparsers = parser.add_subparsers(dest='dict_type', 
                                   required=True, help='Select dictionary for scoring. Options are emac, macd')

emac_parser = subparsers.add_parser('emac')

emac_parser.add_argument('prob_map', choices=['all','single'], help='Assigns either five moral probabilities (all) or only the highest probability (single) to each word. Possible values are: all, single')

emac_parser.add_argument('output_metrics', choices=['sentiment','vice-virtue'],
                        help='Either returns an average sentiment score for each foundation (sentiment) or splits each foundation into a vice/virtue category (vice-virtue). Possible values are: sentiment, vice-virtue')

macd_parser = subparsers.add_parser('macd')




args = vars(parser.parse_args())
IN_FILE_PATH = args['infile']
DICT_TYPE = args['dict_type']
SCORE_METHOD = args['score_method']
OUT_CSV_PATH = args['outfile']


if DICT_TYPE == 'emac':
    PROB_MAP = args['prob_map']
    OUT_METRICS = args['output_metrics']
    
elif DICT_TYPE == 'macd':
    PROB_MAP = ''
    OUT_METRICS = ''
else:
    print('Error! Please specify one of the following dictionaries: emac, macd')
    
infile_type = IN_FILE_PATH.split('.')[-1]

if infile_type == 'csv':
    csv = pd.read_csv(IN_FILE_PATH, header=None)
    num_docs = len(csv)


print("Running emacscore")
print("Total number of input texts to be scored:", num_docs)

if SCORE_METHOD == 'bow':
    df = score_docs(csv,DICT_TYPE,PROB_MAP,SCORE_METHOD,OUT_METRICS,num_docs)
    df.to_csv(OUT_CSV_PATH, index=False)

if SCORE_METHOD == 'wordlist':
    df = score_docs(csv,DICT_TYPE,SCORE_METHOD,num_docs)
    df.to_csv(OUT_CSV_PATH, index=False)


print('Scoring completed.')

